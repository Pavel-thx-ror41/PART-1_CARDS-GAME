#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pry'

require_relative 'deck'
require_relative 'dealer'
require_relative 'player'
require_relative 'game'

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class App
  def run
    test
    dealer = Dealer.new(100)
    player = Player.new(ask('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è'), 100)

    # binding.pry
    loop do
      puts Game.new(dealer, player).play
      exit if player.money < 10 || dealer.money < 10 || ask('–ï—â—ë –∏–≥—Ä—É?').to_s.upcase.eql?('N')
    end
  end

  private

  def ask(prompt)
    print "#{prompt}: "
    gets.chomp
  end

  def test
    test_deck
    test_game
  end

  def test_deck
    deck = Deck.new
    1..52.times { deck.card_get }

    begin
      wrong_card = deck.card_get
    rescue StandardError
      # do nothing
    end
    raise '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–æ–ª–æ–¥—ã. –í –∫–æ–ª–æ–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 52 –∫–∞—Ä—Ç—ã' if wrong_card
  end

  def test_game

    # –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
    # –¶–∏—Ñ—Ä—ã
    raise '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤ –¥–ª—è üÇß.' unless
      Game.score_for_card_with_score('üÇß', 10) == 7

    raise '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤ –¥–ª—è üÉÉ.' unless
      Game.score_for_card_with_score('üÉÉ', 21) == 3

    # –¢—É–∑
    raise '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤ –¥–ª—è üÉë.' unless
      Game.score_for_card_with_score('üÉë', 10) == 11

    raise '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤ –¥–ª—è üÇ±.' unless
      Game.score_for_card_with_score('üÇ±', 11) == 1
  end
end

App.new.run
